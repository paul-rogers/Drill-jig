// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protobuf

package org.apache.drill.jig.proto;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class ColumnSchema implements Externalizable, Message<ColumnSchema>, Schema<ColumnSchema>
{

    public static Schema<ColumnSchema> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static ColumnSchema getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ColumnSchema DEFAULT_INSTANCE = new ColumnSchema();

    
    private String name;
    private int type;
    private int nullable;
    private ColumnSchema memberSchema;

    public ColumnSchema()
    {
        
    }

    // getters and setters

    // name

    public String getName()
    {
        return name;
    }

    public ColumnSchema setName(String name)
    {
        this.name = name;
        return this;
    }

    // type

    public int getType()
    {
        return type;
    }

    public ColumnSchema setType(int type)
    {
        this.type = type;
        return this;
    }

    // nullable

    public int getNullable()
    {
        return nullable;
    }

    public ColumnSchema setNullable(int nullable)
    {
        this.nullable = nullable;
        return this;
    }

    // memberSchema

    public ColumnSchema getMemberSchema()
    {
        return memberSchema;
    }

    public ColumnSchema setMemberSchema(ColumnSchema memberSchema)
    {
        this.memberSchema = memberSchema;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ColumnSchema> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public ColumnSchema newMessage()
    {
        return new ColumnSchema();
    }

    public Class<ColumnSchema> typeClass()
    {
        return ColumnSchema.class;
    }

    public String messageName()
    {
        return ColumnSchema.class.getSimpleName();
    }

    public String messageFullName()
    {
        return ColumnSchema.class.getName();
    }

    public boolean isInitialized(ColumnSchema message)
    {
        return true;
    }

    public void mergeFrom(Input input, ColumnSchema message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.name = input.readString();
                    break;
                case 2:
                    message.type = input.readInt32();
                    break;
                case 3:
                    message.nullable = input.readInt32();
                    break;
                case 4:
                    message.memberSchema = input.mergeObject(message.memberSchema, ColumnSchema.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, ColumnSchema message) throws IOException
    {
        if(message.name != null)
            output.writeString(1, message.name, false);

        if(message.type != 0)
            output.writeInt32(2, message.type, false);

        if(message.nullable != 0)
            output.writeInt32(3, message.nullable, false);

        if(message.memberSchema != null)
             output.writeObject(4, message.memberSchema, ColumnSchema.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "name";
            case 2: return "type";
            case 3: return "nullable";
            case 4: return "memberSchema";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("name", 1);
        __fieldMap.put("type", 2);
        __fieldMap.put("nullable", 3);
        __fieldMap.put("memberSchema", 4);
    }
    
}
