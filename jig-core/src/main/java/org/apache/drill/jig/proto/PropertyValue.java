// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protobuf

package org.apache.drill.jig.proto;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class PropertyValue implements Externalizable, Message<PropertyValue>, Schema<PropertyValue>
{

    public static Schema<PropertyValue> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static PropertyValue getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final PropertyValue DEFAULT_INSTANCE = new PropertyValue();

    
    private String name;
    private String value;

    public PropertyValue()
    {
        
    }

    public PropertyValue(
        String name
    )
    {
        this.name = name;
    }

    // getters and setters

    // name

    public String getName()
    {
        return name;
    }

    public PropertyValue setName(String name)
    {
        this.name = name;
        return this;
    }

    // value

    public String getValue()
    {
        return value;
    }

    public PropertyValue setValue(String value)
    {
        this.value = value;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<PropertyValue> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public PropertyValue newMessage()
    {
        return new PropertyValue();
    }

    public Class<PropertyValue> typeClass()
    {
        return PropertyValue.class;
    }

    public String messageName()
    {
        return PropertyValue.class.getSimpleName();
    }

    public String messageFullName()
    {
        return PropertyValue.class.getName();
    }

    public boolean isInitialized(PropertyValue message)
    {
        return 
            message.name != null;
    }

    public void mergeFrom(Input input, PropertyValue message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.name = input.readString();
                    break;
                case 2:
                    message.value = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, PropertyValue message) throws IOException
    {
        if(message.name == null)
            throw new UninitializedMessageException(message);
        output.writeString(1, message.name, false);

        if(message.value != null)
            output.writeString(2, message.value, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "name";
            case 2: return "value";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("name", 1);
        __fieldMap.put("value", 2);
    }
    
}
