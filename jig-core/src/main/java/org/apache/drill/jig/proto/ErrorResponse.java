// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protobuf

package org.apache.drill.jig.proto;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class ErrorResponse implements Externalizable, Message<ErrorResponse>, Schema<ErrorResponse>
{

    public static Schema<ErrorResponse> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static ErrorResponse getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ErrorResponse DEFAULT_INSTANCE = new ErrorResponse();

    
    private Integer code;
    private String sqlCode;
    private String message;

    public ErrorResponse()
    {
        
    }

    public ErrorResponse(
        Integer code
    )
    {
        this.code = code;
    }

    // getters and setters

    // code

    public Integer getCode()
    {
        return code;
    }

    public ErrorResponse setCode(Integer code)
    {
        this.code = code;
        return this;
    }

    // sqlCode

    public String getSqlCode()
    {
        return sqlCode;
    }

    public ErrorResponse setSqlCode(String sqlCode)
    {
        this.sqlCode = sqlCode;
        return this;
    }

    // message

    public String getMessage()
    {
        return message;
    }

    public ErrorResponse setMessage(String message)
    {
        this.message = message;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ErrorResponse> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public ErrorResponse newMessage()
    {
        return new ErrorResponse();
    }

    public Class<ErrorResponse> typeClass()
    {
        return ErrorResponse.class;
    }

    public String messageName()
    {
        return ErrorResponse.class.getSimpleName();
    }

    public String messageFullName()
    {
        return ErrorResponse.class.getName();
    }

    public boolean isInitialized(ErrorResponse message)
    {
        return 
            message.code != null;
    }

    public void mergeFrom(Input input, ErrorResponse message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.code = input.readInt32();
                    break;
                case 2:
                    message.sqlCode = input.readString();
                    break;
                case 3:
                    message.message = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, ErrorResponse message) throws IOException
    {
        if(message.code == null)
            throw new UninitializedMessageException(message);
        output.writeInt32(1, message.code, false);

        if(message.sqlCode != null)
            output.writeString(2, message.sqlCode, false);

        if(message.message != null)
            output.writeString(3, message.message, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "code";
            case 2: return "sqlCode";
            case 3: return "message";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("code", 1);
        __fieldMap.put("sqlCode", 2);
        __fieldMap.put("message", 3);
    }
    
}
