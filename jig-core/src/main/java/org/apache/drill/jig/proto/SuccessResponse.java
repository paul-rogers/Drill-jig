// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protobuf

package org.apache.drill.jig.proto;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class SuccessResponse implements Externalizable, Message<SuccessResponse>, Schema<SuccessResponse>
{

    public static Schema<SuccessResponse> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static SuccessResponse getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final SuccessResponse DEFAULT_INSTANCE = new SuccessResponse();

    
    private int rowCount;

    public SuccessResponse()
    {
        
    }

    // getters and setters

    // rowCount

    public int getRowCount()
    {
        return rowCount;
    }

    public SuccessResponse setRowCount(int rowCount)
    {
        this.rowCount = rowCount;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<SuccessResponse> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public SuccessResponse newMessage()
    {
        return new SuccessResponse();
    }

    public Class<SuccessResponse> typeClass()
    {
        return SuccessResponse.class;
    }

    public String messageName()
    {
        return SuccessResponse.class.getSimpleName();
    }

    public String messageFullName()
    {
        return SuccessResponse.class.getName();
    }

    public boolean isInitialized(SuccessResponse message)
    {
        return true;
    }

    public void mergeFrom(Input input, SuccessResponse message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.rowCount = input.readInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, SuccessResponse message) throws IOException
    {
        if(message.rowCount != 0)
            output.writeInt32(1, message.rowCount, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "rowCount";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("rowCount", 1);
    }
    
}
